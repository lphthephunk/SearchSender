{"version":3,"sources":["../../../../server/graphql/resolvers/User/index.js"],"names":["Query","user","root","email","password","User","findOne","exec","foundUser","valid","bcrypt","compare","JSON","stringify","userId","_id","JWT_TOKEN","jsonwebtoken","sign","id","secret","expiresIn","Error","users","args","authenticatedUser","find","populate","Mutation","addUser","hash","newUser","save","result","editUser","findOneAndUpdate","$set","deleteUser","findByIdAndRemove"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;eAEe;AACbA,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI;AAAA;AAAA;AAAA,8BAAE,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAeC,gBAAAA,KAAf,QAAeA,KAAf,EAAsBC,QAAtB,QAAsBA,QAAtB;AAAA;AAAA;AAAA,uBAEsBC,mBAAKC,OAAL,CAAa;AAAEH,kBAAAA,KAAK,EAALA;AAAF,iBAAb,EAAwBI,IAAxB,EAFtB;;AAAA;AAEIC,gBAAAA,SAFJ;;AAAA,qBAGEA,SAHF;AAAA;AAAA;AAAA;;AAIMC,gBAAAA,KAJN,GAIcC,gBAAOC,OAAP,CAAeP,QAAf,EAAyBI,SAAS,CAACJ,QAAnC,CAJd;;AAAA,qBAKIK,KALJ;AAAA;AAAA;AAAA;;AAAA,iDAMSG,IAAI,CAACC,SAAL,CAAe;AACpBC,kBAAAA,MAAM,EAAEN,SAAS,CAACO,GADE;AAEpBZ,kBAAAA,KAAK,EAAEK,SAAS,CAACL,KAFG;AAGpBa,kBAAAA,SAAS,EAAEC,sBAAaC,IAAb,CACT;AAAEC,oBAAAA,EAAE,EAAEX,SAAS,CAACO,GAAhB;AAAqBZ,oBAAAA,KAAK,EAAEK,SAAS,CAACL;AAAtC,mBADS,EAETiB,gBAFS,EAGT;AAAEC,oBAAAA,SAAS,EAAE;AAAb,mBAHS;AAHS,iBAAf,CANT;;AAAA;AAAA,sBAgBQ,IAAIC,KAAJ,CAAU,6BAAV,CAhBR;;AAAA;AAAA;AAAA;;AAAA;AAAA,sBAmBM,IAAIA,KAAJ,CAAU,4CAAV,CAnBN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,sBAsBI,IAAIA,KAAJ,aAtBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OADC;AA0BLC,IAAAA,KAAK;AAAA;AAAA;AAAA,8BAAE,kBAAOrB,IAAP,EAAasB,IAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAqBC,gBAAAA,iBAArB,SAAqBA,iBAArB;AAAA;;AAAA,qBAECA,iBAFD;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGmBpB,mBAAKqB,IAAL,CAAU,EAAV,EACjBC,QADiB,GAEjBpB,IAFiB,EAHnB;;AAAA;AAGKgB,gBAAAA,OAHL;AAAA,kDAMMA,OANN;;AAAA;AAAA,sBAQK,IAAID,KAAJ,CAAU,mBAAV,CARL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,sBAWG,IAAIA,KAAJ,cAXH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA1BA,GADM;AA0CbM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO;AAAA;AAAA;AAAA,8BAAE,kBAAO3B,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAeC,gBAAAA,KAAf,SAAeA,KAAf,EAAsBC,QAAtB,SAAsBA,QAAtB;AAAA;AAAA;AAAA,uBAEcM,gBAAOoB,IAAP,CAAY1B,QAAZ,EAAsB,EAAtB,CAFd;;AAAA;AAEC0B,gBAAAA,IAFD;AAGL1B,gBAAAA,QAAQ,GAAG0B,IAAX;AACMC,gBAAAA,OAJD,GAIW,IAAI1B,kBAAJ,CAAS;AAAEF,kBAAAA,KAAK,EAALA,KAAF;AAASC,kBAAAA,QAAQ,EAARA;AAAT,iBAAT,CAJX;AAAA;AAAA,uBAKgB2B,OAAO,CAACC,IAAR,EALhB;;AAAA;AAKCC,gBAAAA,MALD;;AAAA,qBAMDA,MANC;AAAA;AAAA;AAAA;;AAAA,kDAOIrB,IAAI,CAACC,SAAL,CAAe;AACpBC,kBAAAA,MAAM,EAAEmB,MAAM,CAAClB,GADK;AAEpBZ,kBAAAA,KAAK,EAAE8B,MAAM,CAAC9B,KAFM;AAGpBa,kBAAAA,SAAS,EAAEC,sBAAaC,IAAb,CACT;AAAEC,oBAAAA,EAAE,EAAEc,MAAM,CAAClB,GAAb;AAAkBZ,oBAAAA,KAAK,EAAE8B,MAAM,CAAC9B;AAAhC,mBADS,EAETiB,gBAFS,EAGT;AAAEC,oBAAAA,SAAS,EAAE;AAAb,mBAHS;AAHS,iBAAf,CAPJ;;AAAA;AAAA,sBAiBG,IAAIC,KAAJ,CAAU,wCAAV,CAjBH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,sBAoBC,IAAIA,KAAJ,cApBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OADC;AAwBRY,IAAAA,QAAQ;AAAA;AAAA;AAAA,8BAAE,kBAAOhC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAeiB,gBAAAA,EAAf,SAAeA,EAAf,EAAmBhB,KAAnB,SAAmBA,KAAnB,EAA0BC,QAA1B,SAA0BA,QAA1B;AAAwCqB,gBAAAA,iBAAxC,SAAwCA,iBAAxC;AAAA;;AAAA,qBAEFA,iBAFE;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGepB,mBAAK8B,gBAAL,CACjB;AAAEhB,kBAAAA,EAAE,EAAFA;AAAF,iBADiB,EAEjB;AAAEiB,kBAAAA,IAAI,EAAE;AAAEjC,oBAAAA,KAAK,EAALA,KAAF;AAASC,oBAAAA,QAAQ,EAARA;AAAT;AAAR,iBAFiB,EAGjBG,IAHiB,EAHf;;AAAA;AAGEN,gBAAAA,IAHF;;AAAA,qBAOAA,IAPA;AAAA;AAAA;AAAA;;AAAA,kDAQKA,IARL;;AAAA;AAAA,sBAUI,IAAIqB,KAAJ,CAAU,+BAAV,CAVJ;;AAAA;AAAA;AAAA;;AAAA;AAAA,sBAaE,IAAIA,KAAJ,CAAU,mBAAV,CAbF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,sBAgBA,IAAIA,KAAJ,cAhBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAxBA;AA2CRe,IAAAA,UAAU;AAAA;AAAA;AAAA,8BAAE,kBAAOnC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAeiB,gBAAAA,EAAf,SAAeA,EAAf;AAAuBM,gBAAAA,iBAAvB,SAAuBA,iBAAvB;AAAA;;AAAA,qBAEJA,iBAFI;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGapB,mBAAKiC,iBAAL,CAAuB;AAAEvB,kBAAAA,GAAG,EAAEI;AAAP,iBAAvB,EAAoCZ,IAApC,EAHb;;AAAA;AAGAN,gBAAAA,IAHA;AAAA,kDAICA,IAJD;;AAAA;AAAA,sBAMA,IAAIqB,KAAJ,CAAU,mBAAV,CANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,sBASF,IAAIA,KAAJ,cATE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA3CF;AA1CG,C","sourcesContent":["import bcrypt from \"bcrypt\";\nimport jsonwebtoken from \"jsonwebtoken\";\nimport User from \"../../../models/UserModel\";\nimport secret from \"../../../../jwtAuth\";\n\nexport default {\n  Query: {\n    user: async (root, { email, password }) => {\n      try {\n        const foundUser = await User.findOne({ email }).exec();\n        if (foundUser) {\n          const valid = bcrypt.compare(password, foundUser.password);\n          if (valid) {\n            return JSON.stringify({\n              userId: foundUser._id,\n              email: foundUser.email,\n              JWT_TOKEN: jsonwebtoken.sign(\n                { id: foundUser._id, email: foundUser.email },\n                secret,\n                { expiresIn: \"1d\" }\n              )\n            });\n          } else {\n            throw new Error(\"Incorrect email or password\");\n          }\n        } else {\n          throw new Error(\"Cannot find a user with this email address\");\n        }\n      } catch (err) {\n        throw new Error(err);\n      }\n    },\n    users: async (root, args, { authenticatedUser }) => {\n      try {\n        if (authenticatedUser) {\n          const users = await User.find({})\n            .populate()\n            .exec();\n          return users;\n        } else {\n          throw new Error(\"Not authenticated\");\n        }\n      } catch (err) {\n        throw new Error(err);\n      }\n    }\n  },\n  Mutation: {\n    addUser: async (root, { email, password }) => {\n      try {\n        const hash = await bcrypt.hash(password, 10);\n        password = hash;\n        const newUser = new User({ email, password });\n        const result = await newUser.save();\n        if (result) {\n          return JSON.stringify({\n            userId: result._id,\n            email: result.email,\n            JWT_TOKEN: jsonwebtoken.sign(\n              { id: result._id, email: result.email },\n              secret,\n              { expiresIn: \"1d\" }\n            )\n          });\n        } else {\n          throw new Error(\"Problem registering. Please try again.\");\n        }\n      } catch (err) {\n        throw new Error(err);\n      }\n    },\n    editUser: async (root, { id, email, password }, { authenticatedUser }) => {\n      try {\n        if (authenticatedUser) {\n          const user = await User.findOneAndUpdate(\n            { id },\n            { $set: { email, password } }\n          ).exec();\n          if (user) {\n            return user;\n          } else {\n            throw new Error(\"Couldn't find associated user\");\n          }\n        } else {\n          throw new Error(\"Not authenticated\");\n        }\n      } catch (err) {\n        throw new Error(err);\n      }\n    },\n    deleteUser: async (root, { id }, { authenticatedUser }) => {\n      try {\n        if (authenticatedUser) {\n          const user = await User.findByIdAndRemove({ _id: id }).exec();\n          return user;\n        } else {\n          throw new Error(\"Not authenticated\");\n        }\n      } catch (err) {\n        throw new Error(err);\n      }\n    }\n  }\n};\n"],"file":"index.js"}
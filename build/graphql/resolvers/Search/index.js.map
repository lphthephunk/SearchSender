{"version":3,"sources":["../../../../server/graphql/resolvers/Search/index.js"],"names":["Query","schedule","root","userId","executionDay","authenticatedUser","Schedule","findOne","exec","Error","schedules","find","populate","getCities","args","cities","Mutation","addSchedule","executionDays","executionTime","searchText","searchCity","console","log","agenda","newSchedule","save","res","User","_id","foundUser","job","create","to","email","searchData","city","scheduleId","includes","editSchedule","findOneAndUpdate","$set","resultingSchedule","jobs","foundJobs","forEach","remove","deleteSchedule","mongoose","Types","ObjectId","findByIdAndRemove"],"mappings":"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","sourcesContent":["import Schedule from \"../../../models/SearchCriteriaModel\";\nimport User from \"../../../models/UserModel\";\nimport { agenda } from \"../../../../server\";\nimport { everyday, certainDays } from \"../../../utils/agenda/scheduler\";\nimport GetCities from \"../../../external/craigslist/getCities\";\nimport mongoose from \"mongoose\";\n\nexport default {\n  Query: {\n    schedule: async (root, { userId, executionDay }, { authenticatedUser }) => {\n      try {\n        if (authenticatedUser) {\n          const schedule = await Schedule.findOne({\n            userId,\n            executionDay\n          }).exec();\n          if (schedule) {\n            return schedule;\n          } else {\n            throw new Error(\"Could not find an associated schedule.\");\n          }\n        } else {\n          throw new Error(\"Not authenticated\");\n        }\n      } catch (err) {\n        throw new Error(err);\n      }\n    },\n    schedules: async (root, { userId }, { authenticatedUser }) => {\n      try {\n        if (authenticatedUser) {\n          const schedules = await Schedule.find({ userId })\n            .populate()\n            .exec();\n          if (schedules) {\n            return schedules;\n          }\n        } else {\n          throw new Error(\"Not authenticated\");\n        }\n      } catch (err) {\n        throw new Error(err);\n      }\n    },\n    getCities: async (root, args, { authenticatedUser }) => {\n      try {\n        if (authenticatedUser) {\n          const cities = await GetCities();\n          return cities;\n        } else {\n          throw new Error(\"Not authenticated\");\n        }\n      } catch (err) {\n        throw new Error(err);\n      }\n    }\n  },\n  Mutation: {\n    addSchedule: async (\n      root,\n      { userId, executionDays, executionTime, searchText, searchCity },\n      { authenticatedUser }\n    ) => {\n      try {\n        console.log(\"wtf: \", agenda.agenda);\n        if (authenticatedUser) {\n          const newSchedule = new Schedule({\n            userId,\n            executionDays,\n            executionTime,\n            searchText,\n            searchCity\n          });\n          const res = await newSchedule.save();\n          if (res) {\n            const foundUser = await User.findOne({ _id: userId });\n            if (foundUser) {\n              const job = agenda.create(\"send-email-to-user\", {\n                to: foundUser.email,\n                searchData: { city: searchCity, searchText },\n                scheduleId: res._id\n              });\n\n              if (executionDays.includes(\"everyday\")) {\n                everyday(job, executionTime);\n              } else {\n                certainDays(job, executionDays, executionTime);\n              }\n            } else {\n              return new Error(\n                \"Unable to find the associated user with this schedule.\"\n              );\n            }\n          } else {\n            return new Error(\n              \"There was trouble saving this schedule. Please try again.\"\n            );\n          }\n        } else {\n          throw new Error(\"Not authenticated\");\n        }\n      } catch (err) {\n        return new Error(err);\n      }\n    },\n    editSchedule: async (\n      root,\n      { _id, executionDays, executionTime, searchText, searchCity },\n      { authenticatedUser }\n    ) => {\n      try {\n        if (authenticatedUser) {\n          const resultingSchedule = await Schedule.findOneAndUpdate(\n            { _id },\n            { $set: { executionDays, executionTime, searchText, searchCity } }\n          ).exec();\n          if (resultingSchedule) {\n            // kill the jobs associated with this schedule so that we can make more with the updated data\n            const foundJobs = await agenda.jobs({\n              \"data.scheduleId\": resultingSchedule._id // already of type ObjectId\n            });\n            if (foundJobs) {\n              foundJobs.forEach(job => {\n                job.remove();\n              });\n            }\n\n            const foundUser = await User.findOne({\n              _id: resultingSchedule.userId\n            });\n\n            if (foundUser) {\n              const job = agenda.create(\"send-email-to-user\", {\n                to: foundUser.email,\n                searchData: { city: searchCity, searchText },\n                scheduleId: resultingSchedule._id\n              });\n\n              if (executionDays.includes(\"everyday\")) {\n                everyday(job, executionTime);\n              } else {\n                certainDays(job, executionDays, executionTime);\n              }\n            } else {\n              return new Error(\"Couldn't find user associated with schedule\");\n            }\n          } else {\n            return new Error(\"Couldn't find corresponding schedule to update\");\n          }\n        } else {\n          return new Error(\"Not authenticated\");\n        }\n      } catch (err) {\n        return new Error(err);\n      }\n    },\n    deleteSchedule: async (root, { _id }, { authenticatedUser }) => {\n      try {\n        if (authenticatedUser) {\n          const jobs = await agenda.jobs({\n            \"data.scheduleId\": mongoose.Types.ObjectId(_id)\n          });\n          if (jobs) {\n            jobs.forEach(job => {\n              job.remove();\n            });\n          }\n          await Schedule.findByIdAndRemove({ _id }).exec();\n        } else {\n          return new Error(\"Not authenticated\");\n        }\n      } catch (err) {\n        throw new Error(err);\n      }\n    }\n  }\n};\n"],"file":"index.js"}
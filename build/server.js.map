{"version":3,"sources":["../server/server.js"],"names":["require","config","app","mongURI","agenda","Agenda","mongoose","set","connect","then","console","log","mongo","connection","start","processEvery","define","priority","job","done","attrs","data","to","searchData","message","city","searchText","posts","forEach","post","concat","err","error","catch","auth","secret","credentialsRequired","use","bodyParser","json","origin","credentials","req","schema","context","authenticatedUser","user","graphiql","express","static","get","res","sendFile","path","resolve","__dirname","listen","process","env","PORT"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,IAAMC,GAAG,GAAG,uBAAZ;AAEA,IAAIC,OAAO,GACT,8FADF,C,CAEA;;AACO,IAAMC,MAAM,GAAG,IAAIC,eAAJ,EAAf;;;AAEPC,kBAASC,GAAT,CAAa,iBAAb,EAAgC,IAAhC;;AACAD,kBAASC,GAAT,CAAa,kBAAb,EAAiC,KAAjC;;AACAD,kBAASC,GAAT,CAAa,gBAAb,EAA+B,IAA/B;;AACAD,kBACGE,OADH,CACWL,OADX,EAEGM,IAFH,CAEQ,YAAM;AACVC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAP,EAAAA,MAAM,CAACQ,KAAP,CAAaN,kBAASO,UAAtB,EAAkC,MAAlC,EAA0C,YAAM;AAC9CT,IAAAA,MAAM,CAACU,KAAP;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAP,IAAAA,MAAM,CAACW,YAAP,CAAoB,YAApB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AAEAP,IAAAA,MAAM,CAACY,MAAP,CAAc,oBAAd,EAAoC;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAApC,EAA0D,UAACC,GAAD,EAAMC,IAAN,EAAe;AACvE,UAAI;AACF;AAAA;AAAA,gCAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oCAC4BD,GAAG,CAACE,KAAJ,CAAUC,IADtC,EACSC,EADT,mBACSA,EADT,EACaC,UADb,mBACaA,UADb;AAEKC,kBAAAA,OAFL,GAEe,EAFf;AAAA;AAAA,yBAGqB,qCAClBD,UAAU,CAACE,IADO,EAElBF,UAAU,CAACG,UAFO,EAGlB,KAHkB,EAIlB,IAJkB,EAKlB,KALkB,CAHrB;;AAAA;AAGOC,kBAAAA,KAHP;;AAUC,sBAAI,CAACA,KAAL,EAAY;AACVH,oBAAAA,OAAO,4CACLD,UAAU,CAACG,UADN,cAAP;AAGD,mBAJD,MAIO;AACLC,oBAAAA,KAAK,CAACC,OAAN,CAAc,UAAAC,IAAI,EAAI;AACpBL,sBAAAA,OAAO,GAAGA,OAAO,CAACM,MAAR,CAAeD,IAAf,EAAqB,YAArB,CAAV;AACD,qBAFD;AAGD;;AAlBF;AAAA,yBAmBO,6BAAYP,EAAZ,EAAgBE,OAAhB,EAAyBD,UAAU,CAACG,UAApC,CAnBP;;AAAA;AAoBCP,kBAAAA,IAAI;;AApBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAD,KAqBKV,IArBL,CAqBUU,IArBV,EAqBgBA,IArBhB;AAsBD,OAvBD,CAuBE,OAAOY,GAAP,EAAY;AACZ;AACArB,QAAAA,OAAO,CAACsB,KAAR,CAAcD,GAAd;AACD;AACF,KA5BD;AA6BD,GAnCD;AAoCD,CAxCH,EAyCGE,KAzCH,CAyCS,UAAAF,GAAG,EAAI;AACZrB,EAAAA,OAAO,CAACsB,KAAR,CAAcD,GAAd;AACD,CA3CH,E,CA6CA;;;AACA,IAAMG,IAAI,GAAG,yBAAI;AACfC,EAAAA,MAAM,EAANA,gBADe;AAEfC,EAAAA,mBAAmB,EAAE;AAFN,CAAJ,CAAb;AAKAlC,GAAG,CAACmC,GAAJ,CACE,UADF,EAEEH,IAFF,EAGEI,oBAAWC,IAAX,EAHF,EAIE,mBAAK;AAAEC,EAAAA,MAAM,EAAE,uBAAV;AAAmCC,EAAAA,WAAW,EAAE;AAAhD,CAAL,CAJF,EAKE,6BAAe,UAAAC,GAAG;AAAA,SAAK;AACrBC,IAAAA,MAAM,EAANA,gBADqB;AAErBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,iBAAiB,EAAEH,GAAG,CAACI;AADhB,KAFY;AAKrBC,IAAAA,QAAQ,EAAE;AALW,GAAL;AAAA,CAAlB,CALF;AAcA7C,GAAG,CAACmC,GAAJ,CAAQW,iBAAQC,MAAR,CAAe,QAAf,CAAR;AAEA/C,GAAG,CAACgD,GAAJ,CAAQ,GAAR,EAAa,UAACR,GAAD,EAAMS,GAAN,EAAc;AACzBA,EAAAA,GAAG,CAACC,QAAJ,CAAaC,cAAKC,OAAL,CAAaC,SAAb,EAAwB,QAAxB,EAAkC,YAAlC,CAAb;AACD,CAFD;AAIArD,GAAG,CAACsD,MAAJ,CAAWC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAA/B,EAAqC,YAAM;AACzCjD,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD,CAFD;eAIeT,G","sourcesContent":["import express from \"express\";\nimport mongoose from \"mongoose\";\nimport expressGraphQL from \"express-graphql\";\nimport bodyParser from \"body-parser\";\nimport schema from \"./server/graphql\";\nimport cors from \"cors\";\nimport Agenda from \"agenda\";\nimport jwt from \"express-jwt\";\nimport { sendMessage } from \"./server/utils/Nodemailer\";\nimport { searchCraigslist } from \"./server/utils/craigslist/postRetriever\";\nimport path from \"path\";\nimport secret from \"./jwtAuth\";\n\nrequire(\"dotenv\").config();\n\nconst app = express();\n\nlet mongURI =\n  \"mongodb://heroku_f6rz86m0:tu34o9kicmn3hbaulrt4unt792@ds255740.mlab.com:55740/heroku_f6rz86m0\";\n//let mongURI = \"mongodb://localhost:27017/SearchSender\";\nexport const agenda = new Agenda();\n\nmongoose.set(\"useNewUrlParser\", true);\nmongoose.set(\"useFindAndModify\", false);\nmongoose.set(\"useCreateIndex\", true);\nmongoose\n  .connect(mongURI)\n  .then(() => {\n    console.log(\"MongoDB connected\");\n    agenda.mongo(mongoose.connection, \"jobs\", () => {\n      agenda.start();\n      console.log(\"Agenda initialized\");\n      agenda.processEvery(\"30 seconds\");\n      console.log(\"Agenda pulling jobs every 30 seconds\");\n\n      agenda.define(\"send-email-to-user\", { priority: \"high\" }, (job, done) => {\n        try {\n          (async () => {\n            const { to, searchData } = job.attrs.data;\n            let message = \"\";\n            const posts = await searchCraigslist(\n              searchData.city,\n              searchData.searchText,\n              \"sss\",\n              true,\n              false\n            );\n            if (!posts) {\n              message = `There were no posts matching \"${\n                searchData.searchText\n              }\" today.`;\n            } else {\n              posts.forEach(post => {\n                message = message.concat(post, \"<br/><br/>\");\n              });\n            }\n            await sendMessage(to, message, searchData.searchText);\n            done();\n          })().then(done, done);\n        } catch (err) {\n          // fail silently\n          console.error(err);\n        }\n      });\n    });\n  })\n  .catch(err => {\n    console.error(err);\n  });\n\n// auth middleware\nconst auth = jwt({\n  secret,\n  credentialsRequired: false\n});\n\napp.use(\n  \"/graphql\",\n  auth,\n  bodyParser.json(),\n  cors({ origin: \"http://localhost:3000\", credentials: false }),\n  expressGraphQL(req => ({\n    schema,\n    context: {\n      authenticatedUser: req.user\n    },\n    graphiql: false\n  }))\n);\n\napp.use(express.static(\"public\"));\n\napp.get(\"*\", (req, res) => {\n  res.sendFile(path.resolve(__dirname, \"public\", \"index.html\"));\n});\n\napp.listen(process.env.PORT || 4000, () => {\n  console.log(\"Express server is running...\");\n});\n\nexport default app;\n"],"file":"server.js"}